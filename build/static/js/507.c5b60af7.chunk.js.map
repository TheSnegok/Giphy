{"version":3,"file":"static/js/507.c5b60af7.chunk.js","mappings":"qKACA,EAA0B,uBAA1B,EAAuD,mBAAvD,EAAkF,qBAAlF,EAAqH,2BAArH,EAA8J,2BAA9J,EAAmM,uBAAnM,EAAmO,sBCyBnO,EAvBoB,SAA2BA,GAAmE,IAAzCC,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAC7FG,GAA0CC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3DI,EAAcF,EAAA,GAAEG,EAAeH,EAAA,GAChCI,EAAWX,EAAIY,QAkBrB,OAjBAC,EAAAA,EAAAA,YAAU,WACT,IAAMC,EAAW,IAAIC,sBACpB,SAAAC,GAAc,IAAZC,GAAWT,EAAAA,EAAAA,GAAAQ,EAAA,GAAN,GAENN,EAAgBO,EAAMR,eACvB,GAAG,CACHR,WAAAA,IAKD,OAHIU,GACHG,EAASI,QAAQP,GAEX,WACFA,GACHG,EAASK,UAAUR,EAErB,CACD,GAAG,CAACA,EAAUV,IACPQ,CACR,E,SC6BA,EA5Cc,SAAHO,GAAkC,IAA5BI,EAAGJ,EAAHI,IAAKC,EAAIL,EAAJK,KAEfrB,GAAWsB,EAAAA,EAAAA,UAEjBjB,GAA4BC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CkB,EAAMhB,EAAA,GAAEiB,EAASjB,EAAA,GAElBkB,EAAWC,EAA4B1B,EAAK,OAYlD,OAAO2B,EAAAA,EAAAA,UAAQ,eAAAC,EAAA,OACdC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAW/B,IAAKA,EAAIgC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OACCH,UAAWC,EACX,aAAqB,OAATV,EAAgB,oCAAsC,oNAA0CW,UAE5GH,EAAAA,EAAAA,MAAA,WAASC,UAAWL,EAAWM,EAAgBA,EAAcC,SAAA,EAC5DC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,gBACbD,EAAAA,EAAAA,KAAA,OACCE,KAA4B,QAAvBP,EAAAR,EAAIgB,OAAOC,oBAAY,IAAAT,OAAA,EAAvBA,EAAyBU,MAAOlB,EAAIgB,OAAOG,SAASD,IACzDE,IAAKpB,EAAIqB,KAETX,UAAYP,EAAqBQ,EAAZA,EACrBW,QAAS,kBArBG,SAACC,GACjB,IACCC,UAAUC,UAAUC,UAAUH,EAC/B,CAAE,MAAOI,GACRC,QAAQD,MAAMA,EACf,CACD,CAeoBE,CAAS7B,EAAIgB,OAAOG,SAASD,IAAI,EAChDY,OAAQ,kBAxBiB1B,GAAU,EAwBV,EACzB2B,YAAY,YACZC,MAAM,MACNC,OAAO,OANFjC,EAAIkC,UAUV/B,IAAUU,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,MACvB,GACJ,CAACX,EAAKG,EAAQE,EAAUJ,GAC5B,C","sources":["webpack://giphy/./src/Components/Image/Image.module.css?ff86","hook/useOnScreen.tsx","Components/Image/Image.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Image_wrapper__nK9d9\",\"gif\":\"Image_gif__S38ln\",\"image\":\"Image_image__n5tz4\",\"showPicture\":\"Image_showPicture__Bl2TX\",\"nonePicture\":\"Image_nonePicture__QCbgE\",\"gifNone\":\"Image_gifNone__vCoCF\",\"loader\":\"Image_loader__oQ6sX\",\"loading\":\"Image_loading__qcdmI\",\"showMore\":\"Image_showMore__BElkH\"};","import { useState, useEffect, MutableRefObject } from \"react\";\r\n\r\n// Hook\r\nconst useOnScreen = <T extends Element | null>(ref: MutableRefObject<T>, rootMargin: string = \"0px\"): boolean => {\r\n\tconst [isIntersecting, setIntersecting] = useState<boolean>(false);\r\n\tconst stateRef = ref.current;\r\n\tuseEffect(() => {\r\n\t\tconst observer = new IntersectionObserver(\r\n\t\t\t([entry]) => {\r\n\t\t\t\t// Update our state when observer callback fires\r\n\t\t\t\tsetIntersecting(entry.isIntersecting);\r\n\t\t\t}, {\r\n\t\t\trootMargin\r\n\t\t});\r\n\t\tif (stateRef) {\r\n\t\t\tobserver.observe(stateRef);\r\n\t\t}\r\n\t\treturn () => { // eslint-disable-next-line\r\n\t\t\tif (stateRef) {\r\n\t\t\t\tobserver.unobserve(stateRef);\r\n\t\t\t}\r\n\t\t};\r\n\t}, [stateRef, rootMargin]); // Empty array ensures that effect is only run on mount and unmount \r\n\treturn isIntersecting;\r\n};\r\n\r\nexport default useOnScreen;","import { useMemo, useRef, useState } from \"react\";\r\nimport s from \"./Image.module.css\";\r\nimport useOnScreen from \"../../hook/useOnScreen\";\r\n\r\ninterface PropImage {\r\n\tgif: any;\r\n\tlang: string;\r\n};\r\n\r\nconst Image = ({ gif, lang }: PropImage) => {\r\n\r\n\tconst ref: any = useRef<HTMLDivElement>();\r\n\r\n\tconst [loader, setLoader] = useState<boolean>(false);\r\n\t\r\n\tconst onScreen = useOnScreen<HTMLDivElement>(ref, \"0px\");\r\n\t\r\n\tconst loadImage = (): void => setLoader(true);\r\n\r\n\tconst copyLink = (text: string): void => {\r\n\t\ttry {\r\n\t\t\tnavigator.clipboard.writeText(text);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\r\n\treturn useMemo(() => (\r\n\t\t<div className={s.wrapper} ref={ref}>\r\n\t\t\t<div\r\n\t\t\t\tclassName={s.image}\r\n\t\t\t\tdata-title={lang === 'en' ? 'Click to copy the link to the gif' : 'Нажмите чтобы скопировать ссылку на гиф'}\r\n\t\t\t>\r\n\t\t\t\t<picture className={onScreen ? s.showPicture : s.nonePicture}>\r\n\t\t\t\t\t<source type=\"image/webp\" />\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc={gif.images.preview_webp?.url || gif.images.original.url}\r\n\t\t\t\t\t\talt={gif.slug}\r\n\t\t\t\t\t\tkey={gif.id}\r\n\t\t\t\t\t\tclassName={!loader ? s.gifNone : s.gif}\r\n\t\t\t\t\t\tonClick={() => copyLink(gif.images.original.url)}\r\n\t\t\t\t\t\tonLoad={() => loadImage()}\r\n\t\t\t\t\t\tcrossOrigin=\"anonymous\"\r\n\t\t\t\t\t\twidth=\"361\"\r\n\t\t\t\t\t\theight=\"203\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</picture>\r\n\t\t\t</div>\r\n\t\t\t{!loader && <div className={s.loader}></div>}\r\n\t\t</div>\r\n\t), [gif, loader, onScreen, lang]);\r\n};\r\n\r\nexport default Image;\r\n"],"names":["ref","rootMargin","arguments","length","undefined","_useState","useState","_useState2","_slicedToArray","isIntersecting","setIntersecting","stateRef","current","useEffect","observer","IntersectionObserver","_ref","entry","observe","unobserve","gif","lang","useRef","loader","setLoader","onScreen","useOnScreen","useMemo","_gif$images$preview_w","_jsxs","className","s","children","_jsx","type","src","images","preview_webp","url","original","alt","slug","onClick","text","navigator","clipboard","writeText","error","console","copyLink","onLoad","crossOrigin","width","height","id"],"sourceRoot":""}